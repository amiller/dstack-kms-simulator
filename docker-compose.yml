services:
  app:
    build:
      context: .
      dockerfile_inline: |
        FROM python:3.11-slim
        RUN pip install dstack-sdk eth-account eth-keys eth-utils ecdsa
        ENV PYTHONUNBUFFERED=1
    ports:
      - "80:8080"
    volumes:
      - /var/run/dstack.sock:/var/run/dstack.sock
    command: |
      bash -c '
      python -c "
      import hashlib
      from dataclasses import dataclass
      from dstack_sdk import DstackClient
      from eth_account import Account
      from eth_utils import keccak
      from eth_keys import keys
      import json

      @dataclass
      class SignatureProof:
          derived_private_key: bytes
          app_signature: bytes
          kms_signature: bytes
          derived_address: str
          app_address: str

      class SignatureProofGenerator:
          def __init__(self, dstack_socket='/var/run/dstack.sock'):
              self.client = DstackClient(dstack_socket)
          
          def generate_proof(self, key_path, purpose='mainnet'):
              response = self.client.get_key(key_path, purpose)
              
              derived_private_key = bytes.fromhex(response.key.replace('0x', ''))
              app_signature = bytes.fromhex(response.signature_chain[0].replace('0x', ''))
              kms_signature = bytes.fromhex(response.signature_chain[1].replace('0x', ''))
              
              derived_account = Account.from_key(derived_private_key)
              derived_address = derived_account.address
              
              # Recover app address from signature
              derived_public_key = keys.PrivateKey(derived_private_key).public_key
              derived_pubkey_sec1 = derived_public_key.to_compressed_bytes()
              message = f'{purpose}:{derived_pubkey_sec1.hex()}'
              message_hash = keccak(text=message)
              app_address = Account._recover_hash(message_hash, signature=app_signature)
              
              return SignatureProof(
                  derived_private_key=derived_private_key,
                  app_signature=app_signature,
                  kms_signature=kms_signature,
                  derived_address=derived_address,
                  app_address=app_address
              )

      generator = SignatureProofGenerator()
      proof = generator.generate_proof('wallet/ethereum', 'mainnet')
      
      print('DStack Signature Data:')
      print(json.dumps({
        'derived_key': proof.derived_private_key.hex(),
        'app_signature': proof.app_signature.hex(),
        'kms_signature': proof.kms_signature.hex(),
        'derived_address': proof.derived_address,
        'app_address': proof.app_address
      }, indent=2))
      "